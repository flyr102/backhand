/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package code;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.conf.ConfigurationBuilder;

/**
 *
 * @author conorfryer
 */
public class MainFrame extends javax.swing.JFrame
{
    private static final ConfigurationBuilder cb = new ConfigurationBuilder();
    private static TwitterFactory tf;
    private int hGoalCounter = 0;
    private int aGoalCounter = 0;
    private int hShotCounter = 0;
    private int aShotCounter = 0;
    private int recentTable = 0;
    private String filePath;
    private FileWriter fileWriter;
    
    /*  
        cb.setOAuthConsumerKey("ursTxyfj7C6rmNDqkNR8sh4hY");
        cb.setOAuthConsumerSecret("37v2CFFerezsMkuPBjf8RPYQAcsbbA50yJ1aSAPa6GZU35vtzJ");
        cb.setOAuthAccessToken("1380528225588236291-jGKi6jnT6vdNZsiu8wnlgXtM50MSOM");
        cb.setOAuthAccessTokenSecret("xizY5sU7TRyBilg9bwqkJNp0OtuzlDTlKjMvLhFOrybc5");
    */
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame()
    {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        hGoals = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        hPenalty = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        aGoals = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        aPenalty = new javax.swing.JTable();
        tweetButton = new javax.swing.JButton();
        homeTeam = new javax.swing.JTextField();
        awayTeam = new javax.swing.JTextField();
        hGoalCount = new javax.swing.JLabel();
        period = new javax.swing.JLabel();
        aGoalCount = new javax.swing.JLabel();
        hNewGoalButton = new javax.swing.JButton();
        hNewPenaltyButton = new javax.swing.JButton();
        aNewGoalButton = new javax.swing.JButton();
        aNewPenaltyButton = new javax.swing.JButton();
        hRemoveGoal = new javax.swing.JButton();
        aRemoveGoal = new javax.swing.JButton();
        hRemovePenalty = new javax.swing.JButton();
        aRemovePenalty = new javax.swing.JButton();
        periodField = new javax.swing.JTextField();
        shotCountLabel = new javax.swing.JLabel();
        gameStartButton = new javax.swing.JButton();
        periodStartButton = new javax.swing.JButton();
        periodEndButton = new javax.swing.JButton();
        gameEndButton = new javax.swing.JButton();
        hPlusShot = new javax.swing.JButton();
        hMinusShot = new javax.swing.JButton();
        hShotCount = new javax.swing.JLabel();
        aShotCount = new javax.swing.JLabel();
        aPlusShot = new javax.swing.JButton();
        aMinusShot = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        currentStatus = new javax.swing.JLabel();
        menubar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exportGD = new javax.swing.JMenuItem();
        infoMenu = new javax.swing.JMenu();
        help = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Backhand");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hGoals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "*Goal*", "Assist", "*Period*", "*Time*", "Shot Type"
            }
        ));
        hGoals.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                hGoalsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(hGoals);
        if (hGoals.getColumnModel().getColumnCount() > 0)
        {
            hGoals.getColumnModel().getColumn(0).setResizable(false);
            hGoals.getColumnModel().getColumn(1).setResizable(false);
            hGoals.getColumnModel().getColumn(2).setResizable(false);
            hGoals.getColumnModel().getColumn(3).setResizable(false);
            hGoals.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 460, 121));

        hPenalty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "*Penalty*", "*Type*", "*Period*", "*Time*"
            }
        ));
        hPenalty.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                hPenaltyMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(hPenalty);
        if (hPenalty.getColumnModel().getColumnCount() > 0)
        {
            hPenalty.getColumnModel().getColumn(0).setResizable(false);
            hPenalty.getColumnModel().getColumn(1).setResizable(false);
            hPenalty.getColumnModel().getColumn(2).setResizable(false);
            hPenalty.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 278, 430, 121));

        aGoals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "*Goal*", "Assist", "*Period*", "*Time*", "Shot Type"
            }
        ));
        aGoals.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                aGoalsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(aGoals);
        if (aGoals.getColumnModel().getColumnCount() > 0)
        {
            aGoals.getColumnModel().getColumn(0).setResizable(false);
            aGoals.getColumnModel().getColumn(1).setResizable(false);
            aGoals.getColumnModel().getColumn(2).setResizable(false);
            aGoals.getColumnModel().getColumn(3).setResizable(false);
            aGoals.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(681, 100, 460, 120));

        aPenalty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "*Player*", "*Type*", "*Period*", "*Time*"
            }
        ));
        aPenalty.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                aPenaltyMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(aPenalty);
        if (aPenalty.getColumnModel().getColumnCount() > 0)
        {
            aPenalty.getColumnModel().getColumn(0).setResizable(false);
            aPenalty.getColumnModel().getColumn(1).setResizable(false);
            aPenalty.getColumnModel().getColumn(2).setResizable(false);
            aPenalty.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 280, 440, 121));

        tweetButton.setText("Tweet");
        tweetButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tweetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(tweetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(466, 420, 220, 33));

        homeTeam.setFont(new java.awt.Font("Helvetica Neue", 0, 30)); // NOI18N
        homeTeam.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        homeTeam.setText("Home");
        getContentPane().add(homeTeam, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 470, -1));

        awayTeam.setFont(new java.awt.Font("Helvetica Neue", 0, 30)); // NOI18N
        awayTeam.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        awayTeam.setText("Away");
        getContentPane().add(awayTeam, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 10, 465, -1));

        hGoalCount.setFont(new java.awt.Font("Helvetica Neue", 0, 30)); // NOI18N
        hGoalCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hGoalCount.setText(String.valueOf(hGoalCounter));
        getContentPane().add(hGoalCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 460, -1));

        period.setFont(new java.awt.Font("Helvetica Neue", 0, 30)); // NOI18N
        period.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        period.setText("Period");
        period.setToolTipText("");
        getContentPane().add(period, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, 120, -1));

        aGoalCount.setFont(new java.awt.Font("Helvetica Neue", 0, 30)); // NOI18N
        aGoalCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aGoalCount.setText(String.valueOf(aGoalCounter));
        getContentPane().add(aGoalCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 60, 460, -1));

        hNewGoalButton.setText("New Goal");
        hNewGoalButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hNewGoalButtonActionPerformed(evt);
            }
        });
        getContentPane().add(hNewGoalButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(107, 240, 110, -1));

        hNewPenaltyButton.setText("New Penalty");
        hNewPenaltyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hNewPenaltyButtonActionPerformed(evt);
            }
        });
        getContentPane().add(hNewPenaltyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(113, 410, 110, -1));

        aNewGoalButton.setText("New Goal");
        aNewGoalButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aNewGoalButtonActionPerformed(evt);
            }
        });
        getContentPane().add(aNewGoalButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 240, 110, -1));

        aNewPenaltyButton.setText("New Penalty");
        aNewPenaltyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aNewPenaltyButtonActionPerformed(evt);
            }
        });
        getContentPane().add(aNewPenaltyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(803, 410, 110, -1));

        hRemoveGoal.setText("Remove Goal");
        hRemoveGoal.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hRemoveGoalActionPerformed(evt);
            }
        });
        getContentPane().add(hRemoveGoal, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 240, 130, -1));

        aRemoveGoal.setText("Remove Goal");
        aRemoveGoal.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aRemoveGoalActionPerformed(evt);
            }
        });
        getContentPane().add(aRemoveGoal, new org.netbeans.lib.awtextra.AbsoluteConstraints(929, 240, 130, -1));

        hRemovePenalty.setText("Remove Penalty");
        hRemovePenalty.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hRemovePenaltyActionPerformed(evt);
            }
        });
        getContentPane().add(hRemovePenalty, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 410, -1, -1));

        aRemovePenalty.setText("Remove Penalty");
        aRemovePenalty.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aRemovePenaltyActionPerformed(evt);
            }
        });
        getContentPane().add(aRemovePenalty, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 410, 130, -1));

        periodField.setFont(new java.awt.Font("Helvetica Neue", 0, 25)); // NOI18N
        periodField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        periodField.setText("1");
        getContentPane().add(periodField, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 50, 120, -1));

        shotCountLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        shotCountLabel.setText("Shot Counter");
        getContentPane().add(shotCountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 310, -1, -1));

        gameStartButton.setText("Game Start");
        gameStartButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                gameStartButtonActionPerformed(evt);
            }
        });
        getContentPane().add(gameStartButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 100, 120, -1));

        periodStartButton.setText("Period Start");
        periodStartButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                periodStartButtonActionPerformed(evt);
            }
        });
        getContentPane().add(periodStartButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 140, 120, -1));

        periodEndButton.setText("Period End");
        periodEndButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                periodEndButtonActionPerformed(evt);
            }
        });
        getContentPane().add(periodEndButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 180, 120, -1));

        gameEndButton.setText("Game End");
        gameEndButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                gameEndButtonActionPerformed(evt);
            }
        });
        getContentPane().add(gameEndButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 220, 120, -1));

        hPlusShot.setText("+");
        hPlusShot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hPlusShotActionPerformed(evt);
            }
        });
        getContentPane().add(hPlusShot, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 370, -1, -1));

        hMinusShot.setText("-");
        hMinusShot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hMinusShotActionPerformed(evt);
            }
        });
        getContentPane().add(hMinusShot, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 370, -1, -1));

        hShotCount.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        hShotCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hShotCount.setText(String.valueOf(hShotCounter));
        getContentPane().add(hShotCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 340, 80, -1));

        aShotCount.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N
        aShotCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aShotCount.setText(String.valueOf(aShotCounter));
        getContentPane().add(aShotCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, 80, 30));

        aPlusShot.setText("+");
        aPlusShot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aPlusShotActionPerformed(evt);
            }
        });
        getContentPane().add(aPlusShot, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 370, -1, -1));

        aMinusShot.setText("-");
        aMinusShot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aMinusShotActionPerformed(evt);
            }
        });
        getContentPane().add(aMinusShot, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 370, -1, -1));

        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statusLabel.setText("Status");
        getContentPane().add(statusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 260, 40, -1));

        currentStatus.setFont(new java.awt.Font("sansserif", 0, 11)); // NOI18N
        currentStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentStatus.setText("All Good");
        getContentPane().add(currentStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 270, 300, 40));

        fileMenu.setText("File");

        exportGD.setText("Export Game Data");
        exportGD.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exportGDActionPerformed(evt);
            }
        });
        fileMenu.add(exportGD);

        menubar.add(fileMenu);

        infoMenu.setText("Info");

        help.setText("Help/Info");
        help.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                helpActionPerformed(evt);
            }
        });
        infoMenu.add(help);

        menubar.add(infoMenu);

        setJMenuBar(menubar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tweetButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tweetButtonActionPerformed
    {//GEN-HEADEREND:event_tweetButtonActionPerformed
        try
        {
            switch (recentTable)
            {
                case 1 -> tableTweet(hGoals);
                case 2 -> tableTweet(hPenalty);
                case 3 -> tableTweet(aGoals);
                case 4 -> tableTweet(aPenalty);
                default ->
                {
                    currentStatus.setForeground(Color.red);
                    currentStatus.setText("ERROR: Row Selection");
                }
            }
        } catch (TwitterException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tweetButtonActionPerformed

    private void hNewGoalButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hNewGoalButtonActionPerformed
    {//GEN-HEADEREND:event_hNewGoalButtonActionPerformed
        addRow(hGoals);
    }//GEN-LAST:event_hNewGoalButtonActionPerformed

    private void hNewPenaltyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hNewPenaltyButtonActionPerformed
    {//GEN-HEADEREND:event_hNewPenaltyButtonActionPerformed
        addRow(hPenalty);
    }//GEN-LAST:event_hNewPenaltyButtonActionPerformed

    private void aNewGoalButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aNewGoalButtonActionPerformed
    {//GEN-HEADEREND:event_aNewGoalButtonActionPerformed
        addRow(aGoals);
    }//GEN-LAST:event_aNewGoalButtonActionPerformed

    private void aNewPenaltyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aNewPenaltyButtonActionPerformed
    {//GEN-HEADEREND:event_aNewPenaltyButtonActionPerformed
        addRow(aPenalty);
    }//GEN-LAST:event_aNewPenaltyButtonActionPerformed

    private void hRemovePenaltyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hRemovePenaltyActionPerformed
    {//GEN-HEADEREND:event_hRemovePenaltyActionPerformed
        removeRow(hPenalty);
    }//GEN-LAST:event_hRemovePenaltyActionPerformed

    private void aRemovePenaltyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aRemovePenaltyActionPerformed
    {//GEN-HEADEREND:event_aRemovePenaltyActionPerformed
        removeRow(aPenalty);
    }//GEN-LAST:event_aRemovePenaltyActionPerformed

    private void hRemoveGoalActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hRemoveGoalActionPerformed
    {//GEN-HEADEREND:event_hRemoveGoalActionPerformed
        removeRow(hGoals);
    }//GEN-LAST:event_hRemoveGoalActionPerformed

    private void aRemoveGoalActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aRemoveGoalActionPerformed
    {//GEN-HEADEREND:event_aRemoveGoalActionPerformed
        removeRow(aGoals);
    }//GEN-LAST:event_aRemoveGoalActionPerformed

    private void hGoalsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_hGoalsMouseClicked
    {//GEN-HEADEREND:event_hGoalsMouseClicked
        unselectRows(hPenalty, aGoals, aPenalty);
        recentTable = 1;
    }//GEN-LAST:event_hGoalsMouseClicked

    private void hPenaltyMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_hPenaltyMouseClicked
    {//GEN-HEADEREND:event_hPenaltyMouseClicked
        unselectRows(hGoals, aGoals, aPenalty);
        recentTable = 2;
    }//GEN-LAST:event_hPenaltyMouseClicked

    private void aGoalsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_aGoalsMouseClicked
    {//GEN-HEADEREND:event_aGoalsMouseClicked
        unselectRows(hGoals, hPenalty, aPenalty);
        recentTable = 3;
    }//GEN-LAST:event_aGoalsMouseClicked

    private void aPenaltyMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_aPenaltyMouseClicked
    {//GEN-HEADEREND:event_aPenaltyMouseClicked
        unselectRows(hGoals, hPenalty, aGoals);
        recentTable = 4;
    }//GEN-LAST:event_aPenaltyMouseClicked

    private void periodEndButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_periodEndButtonActionPerformed
    {//GEN-HEADEREND:event_periodEndButtonActionPerformed
        Twitter twitter = tf.getInstance();
        String message = "End of " + periodSyntax(periodField.getText()) + " - "+ homeTeam.getText() + ": " + hGoalCounter + ", " +  awayTeam.getText() + ": " + aGoalCounter;
        try
        {
            if (message.length() < 280)
            {
                Status status = twitter.updateStatus(message);
                currentStatus.setForeground(Color.black);
                currentStatus.setText("All Good");
                System.out.println("Successfully updated status to " + status.getText());
            }
            else
            {
                currentStatus.setForeground(Color.red);
                currentStatus.setText("ERROR: Tweet is too long.");
            }
        } catch (TwitterException ex)
        {
            currentStatus.setForeground(Color.red);
            currentStatus.setText("ERROR: Duplicate Tweet");
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Successfully updated status to " + message);
    }//GEN-LAST:event_periodEndButtonActionPerformed

    private void gameEndButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_gameEndButtonActionPerformed
    {//GEN-HEADEREND:event_gameEndButtonActionPerformed
        Twitter twitter = tf.getInstance();
        String message = "FINAL - " + homeTeam.getText() + ": " + hGoalCounter + ", " +  awayTeam.getText() + ": " + aGoalCounter;
        try
        {
            if (message.length() < 280)
            {
                Status status = twitter.updateStatus(message);
                currentStatus.setForeground(Color.black);
                currentStatus.setText("All Good");
                System.out.println("Successfully updated status to " + message);
            }
            else
            {
                currentStatus.setForeground(Color.red);
                currentStatus.setText("ERROR: Tweet is too long.");
            }
        } catch (TwitterException ex)
        {
            currentStatus.setForeground(Color.red);
            currentStatus.setText("ERROR: Duplicate Tweet");
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Successfully updated status to " + message);
    }//GEN-LAST:event_gameEndButtonActionPerformed

    private void gameStartButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_gameStartButtonActionPerformed
    {//GEN-HEADEREND:event_gameStartButtonActionPerformed
        Twitter twitter = tf.getInstance();
        String message = "Game Start: " + homeTeam.getText() + " VS. " + awayTeam.getText();
        try
        {
            if (message.length() < 280)
            {
                Status status = twitter.updateStatus(message);
                currentStatus.setForeground(Color.black);
                currentStatus.setText("All Good");
                System.out.println("Successfully updated status to " + status.getText());
            }
            else
            {
                currentStatus.setForeground(Color.red);
                currentStatus.setText("ERROR: Tweet is too long.");
            }
        } catch (TwitterException ex)
        {
            currentStatus.setForeground(Color.red);
            currentStatus.setText("ERROR: Duplicate Tweet");
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Successfully updated status to " + message);
    }//GEN-LAST:event_gameStartButtonActionPerformed

    private void periodStartButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_periodStartButtonActionPerformed
    {//GEN-HEADEREND:event_periodStartButtonActionPerformed
        Twitter twitter = tf.getInstance();
        String message = "Start of " + periodSyntax(periodField.getText()) + " - "+ homeTeam.getText() + ": " + hGoalCounter + ", " +  awayTeam.getText() + ": " + aGoalCounter;
        try
        {
            if (message.length() < 280)
            {
                Status status = twitter.updateStatus(message);
                currentStatus.setForeground(Color.black);
                currentStatus.setText("All Good");
                System.out.println("Successfully updated status to " + status.getText());
            }
            else
            {
                currentStatus.setForeground(Color.red);
                currentStatus.setText("ERROR: Tweet is too long.");
            }
        } catch (TwitterException ex)
        {
            currentStatus.setForeground(Color.red);
            currentStatus.setText("ERROR: Duplicate Tweet");
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Successfully updated status to " + message);
    }//GEN-LAST:event_periodStartButtonActionPerformed

    private void hPlusShotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hPlusShotActionPerformed
    {//GEN-HEADEREND:event_hPlusShotActionPerformed
        hShotCounter++;
        hShotCount.setText(String.valueOf(hShotCounter));
    }//GEN-LAST:event_hPlusShotActionPerformed

    private void hMinusShotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hMinusShotActionPerformed
    {//GEN-HEADEREND:event_hMinusShotActionPerformed
        if (!(hShotCounter == 0))
        {
            hShotCounter--;
            hShotCount.setText(String.valueOf(hShotCounter));
        }
    }//GEN-LAST:event_hMinusShotActionPerformed

    private void aPlusShotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aPlusShotActionPerformed
    {//GEN-HEADEREND:event_aPlusShotActionPerformed
        aShotCounter++;
        aShotCount.setText(String.valueOf(aShotCounter));
    }//GEN-LAST:event_aPlusShotActionPerformed

    private void aMinusShotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aMinusShotActionPerformed
    {//GEN-HEADEREND:event_aMinusShotActionPerformed
        if (!(aShotCounter == 0))
        {
            aShotCounter--;
            aShotCount.setText(String.valueOf(aShotCounter));
        }
    }//GEN-LAST:event_aMinusShotActionPerformed

    private void exportGDActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exportGDActionPerformed
    {//GEN-HEADEREND:event_exportGDActionPerformed
        save();
    }//GEN-LAST:event_exportGDActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_helpActionPerformed
    {//GEN-HEADEREND:event_helpActionPerformed
        HelpFrame helpframe = new HelpFrame();
        helpframe.setVisible(true);
    }//GEN-LAST:event_helpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        cb.setOAuthConsumerKey("ursTxyfj7C6rmNDqkNR8sh4hY");
        cb.setOAuthConsumerSecret("37v2CFFerezsMkuPBjf8RPYQAcsbbA50yJ1aSAPa6GZU35vtzJ");
        cb.setOAuthAccessToken("1380528225588236291-jGKi6jnT6vdNZsiu8wnlgXtM50MSOM");
        cb.setOAuthAccessTokenSecret("xizY5sU7TRyBilg9bwqkJNp0OtuzlDTlKjMvLhFOrybc5");
        tf = new TwitterFactory(cb.build());
        new MainFrame().setVisible(true);
    }
          
    private void addRow(JTable input)
    {
        DefaultTableModel model = (DefaultTableModel) input.getModel();
        if (input.equals(hGoals))
        {
            hGoalCounter++;
            hGoalCount.setText(String.valueOf(hGoalCounter));
        }
        else if(input.equals(aGoals))
        {
            aGoalCounter++;
            aGoalCount.setText(String.valueOf(aGoalCounter));
        }
        model.addRow(new Object []{"", "", "", ""});
    }
    
    private void removeRow(JTable input)
    {
        DefaultTableModel model = (DefaultTableModel) input.getModel();
        for (int i = 0; i < input.getRowCount(); i++)
        {
            if(input.isRowSelected(i))
            {
                model.removeRow(input.getSelectedRow());
                if (input.equals(hGoals))
                {
                    hGoalCounter--;
                    hGoalCount.setText(String.valueOf(hGoalCounter));
                }
                else if(input.equals(aGoals))
                {
                    aGoalCounter--;
                    aGoalCount.setText(String.valueOf(aGoalCounter));
                }
            }
        }
    }
    
    private void unselectRows(JTable one, JTable two, JTable three)
    {
        one.clearSelection();
        two.clearSelection();
        three.clearSelection();
    }
    
    
public void tableTweet(JTable input) throws TwitterException{
    Twitter twitter = tf.getInstance();
    DefaultTableModel model = (DefaultTableModel) input.getModel();
    String message = "";
    switch (recentTable)
    {
        case 1 ->
        {
            for (int i = 0; i < model.getRowCount(); i++)
            {
                if (hGoals.isRowSelected(i) == true)
                {
                    String teamName = homeTeam.getText();
                    String gPlayer = String.valueOf(hGoals.getValueAt(hGoals.getSelectedRow(), 0));
                    String aPlayer = String.valueOf(hGoals.getValueAt(hGoals.getSelectedRow(), 1));
                    String pPeriod = periodSyntax(String.valueOf(hGoals.getValueAt(hGoals.getSelectedRow(), 2)));
                    String time = String.valueOf(hGoals.getValueAt(hGoals.getSelectedRow(), 3));
                    String shotType = String.valueOf(hGoals.getValueAt(hGoals.getSelectedRow(), 4));
                    if (shotType.equals("null"))
                    {
                        shotType = "";
                    }
                    if (!(teamName.equals("")) && !(gPlayer.equals("")) && !(pPeriod.equals("")) && !(time.equals("")))
                    {
                        if (shotType.equals("") && aPlayer.equals(""))
                        {
                            message = "GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer;
                        }
                        else if (aPlayer.equals("") && !(shotType.equals("")))
                        {
                            message = "GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                                shotType;
                        }
                        else if (shotType.equals("") && !(aPlayer.equals("")))
                        {
                             message = "GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                                shotType + " ASSISTS: " + aPlayer;
                        }
                        else
                        {
                            message = "GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                                shotType + " ASSISTS: " + aPlayer;
                        }
                        System.out.println(message);
                        if (message.length() < 280)
                        {
                            Status status = twitter.updateStatus(message);
                            System.out.println("Successfully updated status to " + status.getText());
                            currentStatus.setForeground(Color.black);
                            currentStatus.setText("All Good");
                        }
                        else
                        {
                            currentStatus.setForeground(Color.red);
                            currentStatus.setText("ERROR: Tweet is too long.");
                        }
                    }
                    else
                    {
                        currentStatus.setForeground(Color.red);
                        currentStatus.setText("ERROR (H. Goals): Required Field Missing");
                    }
                }
            }
        }
        case 2 ->
        {
            for (int i = 0; i < model.getRowCount(); i++)
            {
                if (hPenalty.isRowSelected(i) == true)
                {
                    String teamName = homeTeam.getText();
                    String pPlayer = String.valueOf(hPenalty.getValueAt(hPenalty.getSelectedRow(), 0));
                    String pType = String.valueOf(hPenalty.getValueAt(hPenalty.getSelectedRow(), 1));
                    String pPeriod = periodSyntax(String.valueOf(hPenalty.getValueAt(hPenalty.getSelectedRow(), 2)));
                    String pTime = String.valueOf(hPenalty.getValueAt(hPenalty.getSelectedRow(), 3));
                    if (!(teamName.equals("")) && !(pPlayer.equals("")) && !(pType.equals("")) && !(pPeriod.equals("")) && !(pTime.equals("")))
                    {
                        message = "PENALTY: " + teamName + " - " + pType + ": " + pPlayer + " - " + pPeriod + "/" + pTime;
                        System.out.println(message);
                        if (message.length() < 280)
                        {
                            Status status = twitter.updateStatus(message);
                            System.out.println("Successfully updated status to " + status.getText());
                            currentStatus.setForeground(Color.black);
                            currentStatus.setText("All Good");
                        }
                        else
                        {
                            currentStatus.setForeground(Color.red);
                            currentStatus.setText("ERROR: Tweet is too long.");
                        }
                    }
                    else
                    {
                        currentStatus.setForeground(Color.red);
                        currentStatus.setText("ERROR (H. Penalty): Required Field Missing");
                    }
                }
            }
        }
        case 3 ->
        {
            for (int i = 0; i < model.getRowCount(); i++)
            {
                if(aGoals.isRowSelected(i) == true)
                {
                    String teamName = awayTeam.getText();
                    String gPlayer = String.valueOf(aGoals.getValueAt(aGoals.getSelectedRow(), 0));
                    String aPlayer = String.valueOf(aGoals.getValueAt(aGoals.getSelectedRow(), 1));
                    String pPeriod = periodSyntax(String.valueOf(aGoals.getValueAt(aGoals.getSelectedRow(), 2)));
                    String time = String.valueOf(aGoals.getValueAt(aGoals.getSelectedRow(), 3));
                    String shotType = String.valueOf(aGoals.getValueAt(aGoals.getSelectedRow(), 4));
                    if (shotType.equals("null"))
                    {
                        shotType = "";
                    }
                    if (!(teamName.equals("")) && !(gPlayer.equals("")) && !(pPeriod.equals("")) && !(time.equals("")))
                    {
                        if (shotType.equals("") && aPlayer.equals(""))
                        {
                            System.out.println("A");
                            message = "GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer;
                        }
                        else if (aPlayer.equals(""))
                        {
                            System.out.println("B");
                            message = "GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                                shotType;
                        }
                        else if (shotType.equals(""))
                        {
                            System.out.println("C");
                            message = "GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                                shotType + " ASSISTS: " + aPlayer;
                        }
                        else
                        {
                            System.out.println("D");
                            message = "GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                                shotType + " ASSISTS: " + aPlayer;
                        }
                        System.out.println(message);
                        if (message.length() < 280)
                        {
                            Status status = twitter.updateStatus(message);
                            System.out.println("Successfully updated status to " + status.getText());
                            currentStatus.setForeground(Color.black);
                            currentStatus.setText("All Good");
                        }
                        else
                        {
                            currentStatus.setForeground(Color.red);
                            currentStatus.setText("ERROR: Tweet is too long.");
                        }
                    }
                    else
                    {
                        currentStatus.setForeground(Color.red);
                        currentStatus.setText("ERROR (A. Goals): Required Field Missing");
                    }
                }
            }
        }
        case 4 ->
        {
            for (int i = 0; i < model.getRowCount(); i++)
            {
                if (aPenalty.isRowSelected(i) == true)
                {
                    String teamName = awayTeam.getText();
                    String pPlayer = String.valueOf(aPenalty.getValueAt(aPenalty.getSelectedRow(), 0));
                    String pType = String.valueOf(aPenalty.getValueAt(aPenalty.getSelectedRow(), 1));
                    String pPeriod = periodSyntax(String.valueOf(aPenalty.getValueAt(aPenalty.getSelectedRow(), 2)));
                    String pTime = String.valueOf(aPenalty.getValueAt(aPenalty.getSelectedRow(), 3));
                    if (!(teamName.equals("")) && !(pPlayer.equals("")) && !(pType.equals("")) && !(pPeriod.equals("")) && !(pTime.equals("")))
                    {
                        message = "PENALTY: " + teamName + " - " + pType + ": " + pPlayer + " - " + pPeriod + "/" + pTime;
                        System.out.println(message);
                        if (message.length() < 280)
                        {
                            Status status = twitter.updateStatus(message);
                            System.out.println("Successfully updated status to " + status.getText());
                            currentStatus.setForeground(Color.black);
                            currentStatus.setText("All Good");
                        }
                        else
                        {
                            currentStatus.setForeground(Color.red);
                            currentStatus.setText("ERROR: Tweet is too long.");
                        }
                    }
                    else
                    {
                        currentStatus.setForeground(Color.red);
                        currentStatus.setText("ERROR (A. Penalty): Required Field Missing");
                    }
                }
            }
        }
        default ->
        {
            System.out.println("Error with TableTweet");
        }
    }
}   

public String periodSyntax(String period)
{
        return switch (period)
        {
            case "1" -> "1st";
            case "2" -> "2nd";
            case "3" -> "3rd";
            default -> period;
        };
}

public void save() {
        // Output the data to a text file
        JFileChooser filechooser = new JFileChooser();
        filechooser.showSaveDialog(null);
        try (PrintWriter writer = new PrintWriter(new File(filechooser.getSelectedFile().getAbsolutePath()))) {
            // Loop through players and write their information to the file
            // Names on the first line, goals on the second line
            writer.println(homeTeam.getText());
            writer.println("GOALS");
            for (int i = 0; i < hGoals.getRowCount(); i++) 
            {
                String teamName = homeTeam.getText();
                String gPlayer = String.valueOf(hGoals.getValueAt(i, 0));
                String aPlayer = String.valueOf(hGoals.getValueAt(i, 1));
                String pPeriod = periodSyntax(String.valueOf(hGoals.getValueAt(i, 2)));
                String time = String.valueOf(hGoals.getValueAt(i, 3));
                String shotType = String.valueOf(hGoals.getValueAt(i, 4));
                if (shotType.equals("null"))
                {
                    shotType = "";
                }
                if (!(teamName.equals("")) && !(gPlayer.equals("")) && !(pPeriod.equals("")) && !(time.equals("")))
                {
                    if (shotType.equals("") && aPlayer.equals(""))
                    {
                        writer.println("GOAL" + " - " + pPeriod + "/" + time + " - " + gPlayer);
                        System.out.println("GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer);
                    }
                    if (aPlayer.equals(""))
                    {
                        writer.println("GOAL" +" - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType);
                        System.out.println("GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType);
                    }
                    else if (shotType.equals(""))
                    {
                        writer.println("GOAL" +  " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType + " ASSISTS: " + aPlayer);
                        System.out.println("GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType + " ASSISTS: " + aPlayer);
                    }
                    else
                    {
                        writer.println("GOAL" + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType + " ASSISTS: " + aPlayer);
                        System.out.println("GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType + " ASSISTS: " + aPlayer);
                    }
                }
            }
            writer.println("PENALTYS");
            for (int i = 0; i < hPenalty.getRowCount(); i++)
            {
                String teamName = awayTeam.getText();
                String pPlayer = String.valueOf(hPenalty.getValueAt(i, 0));
                String pType = String.valueOf(hPenalty.getValueAt(i, 1));
                String pPeriod = periodSyntax(String.valueOf(hPenalty.getValueAt(i, 2)));
                String pTime = String.valueOf(hPenalty.getValueAt(i, 3));
                if (!(teamName.equals("")) && !(pPlayer.equals("")) && !(pType.equals("")) && !(pPeriod.equals("")) && !(pTime.equals("")))
                {
                    writer.println("PENALTY: " + teamName + " - " + pType + ": " + pPlayer + " - " + pPeriod + "/" + pTime);
                    System.out.println("PENALTY: " + teamName + " - " + pType + ": " + pPlayer + " - " + pPeriod + "/" + pTime);
                }
            }
            writer.println();
            writer.println(awayTeam.getText());
            writer.println("GOALS");
            for (int i = 0; i < aGoals.getRowCount(); i++) 
            {
                String teamName = awayTeam.getText();
                String gPlayer = String.valueOf(aGoals.getValueAt(i, 0));
                String aPlayer = String.valueOf(aGoals.getValueAt(i, 1));
                String pPeriod = periodSyntax(String.valueOf(aGoals.getValueAt(i, 2)));
                String time = String.valueOf(aGoals.getValueAt(i, 3));
                String shotType = String.valueOf(aGoals.getValueAt(i, 4));
                if (shotType.equals("null"))
                {
                    shotType = "";
                }
                if (!(teamName.equals("")) && !(gPlayer.equals("")) && !(pPeriod.equals("")) && !(time.equals("")))
                {
                    if (shotType.equals("") && aPlayer.equals(""))
                    {
                        writer.println("GOAL" + " - " + pPeriod + "/" + time + " - " + gPlayer);
                        System.out.println("GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer);
                    }
                    if (aPlayer.equals(""))
                    {
                        writer.println("GOAL" +" - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType);
                        System.out.println("GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType);
                    }
                    else if (shotType.equals(""))
                    {
                        writer.println("GOAL" +  " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType + " ASSISTS: " + aPlayer);
                        System.out.println("GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType + " ASSISTS: " + aPlayer);
                    }
                    else
                    {
                        writer.println("GOAL" + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType + " ASSISTS: " + aPlayer);
                        System.out.println("GOAL: " + teamName + " - " + pPeriod + "/" + time + " - " + gPlayer + " - " +
                            shotType + " ASSISTS: " + aPlayer);
                    }
                }
            }
            writer.println("PENALTYS");
            for (int i = 0; i < aPenalty.getRowCount(); i++)
            {
                String teamName = awayTeam.getText();
                String pPlayer = String.valueOf(aPenalty.getValueAt(i, 0));
                String pType = String.valueOf(aPenalty.getValueAt(i, 1));
                String pPeriod = periodSyntax(String.valueOf(aPenalty.getValueAt(i, 2)));
                String pTime = String.valueOf(aPenalty.getValueAt(i, 3));
                if (!(teamName.equals("")) && !(pPlayer.equals("")) && !(pType.equals("")) && !(pPeriod.equals("")) && !(pTime.equals("")))
                {
                    writer.println("PENALTY: " + teamName + " - " + pType + ": " + pPlayer + " - " + pPeriod + "/" + pTime);
                    System.out.println("PENALTY: " + teamName + " - " + pType + ": " + pPlayer + " - " + pPeriod + "/" + pTime);
                }
            }
            writer.println();
            writer.println("SHOTS");
            writer.println(homeTeam.getText() + ": " + hShotCounter);
            writer.println(awayTeam.getText() + ": " + aShotCounter);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error trying to load file: " + ex,
                    "Load Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

private void setDefaultFilePath()
{
        String dir = System.getProperty("user.dir");
        String defaultPath = dir + "/DATA/default.txt";

        String path = "";

        try {
            // Load file and read info to RAM from file
            BufferedReader loadFile = new BufferedReader(new FileReader(defaultPath));
            path = loadFile.readLine();
            path = dir + "/DATA/" + path + "/";
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error trying to "
                    + "load default file: " + ex,
                    "Load Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        filePath = path;        
    }
        
protected String getFilePath()
{
    return filePath + "data.txt";
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aGoalCount;
    private javax.swing.JTable aGoals;
    private javax.swing.JButton aMinusShot;
    private javax.swing.JButton aNewGoalButton;
    private javax.swing.JButton aNewPenaltyButton;
    private javax.swing.JTable aPenalty;
    private javax.swing.JButton aPlusShot;
    private javax.swing.JButton aRemoveGoal;
    private javax.swing.JButton aRemovePenalty;
    private javax.swing.JLabel aShotCount;
    private javax.swing.JTextField awayTeam;
    private javax.swing.JLabel currentStatus;
    private javax.swing.JMenuItem exportGD;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton gameEndButton;
    private javax.swing.JButton gameStartButton;
    private javax.swing.JLabel hGoalCount;
    private javax.swing.JTable hGoals;
    private javax.swing.JButton hMinusShot;
    private javax.swing.JButton hNewGoalButton;
    private javax.swing.JButton hNewPenaltyButton;
    private javax.swing.JTable hPenalty;
    private javax.swing.JButton hPlusShot;
    private javax.swing.JButton hRemoveGoal;
    private javax.swing.JButton hRemovePenalty;
    private javax.swing.JLabel hShotCount;
    private javax.swing.JMenuItem help;
    private javax.swing.JTextField homeTeam;
    private javax.swing.JMenu infoMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JLabel period;
    private javax.swing.JButton periodEndButton;
    private javax.swing.JTextField periodField;
    private javax.swing.JButton periodStartButton;
    private javax.swing.JLabel shotCountLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton tweetButton;
    // End of variables declaration//GEN-END:variables
}
